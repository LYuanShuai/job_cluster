buildscript {
    ext {
        springBootVersion = '2.7.1'
    }
    repositories {
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.github.node-gradle:gradle-node-plugin:3.3.0"
    }
}

plugins {
    id "io.freefair.lombok" version "6.5.0.3"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.github.node-gradle.node"

group = 'lys.test'
version = '0.0.1-SNAPSHOT'
allprojects {
    sourceCompatibility = "1.8"
}

repositories {
    maven { url 'https://maven.aliyun.com/repository/central' }
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    mavenCentral()
}

dependencies {
    implementation 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'mysql:mysql-connector-java:8.0.29'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

task copyWebApp(type: Copy) {
    from 'src/main/webapp/build'
    into 'build/resources/main/static/.'
}

//task appNpmInstall(type: NpmTask) {
//    description = "Installs all dependencies from package.json"
//    workingDir = file("${project.projectDir}/src/main/webapp")
//    args = ["install"]
//}

task appNpmBuild(type: NpmTask) {
    description = "Builds production version of the webapp"
    workingDir = file("${project.projectDir}/src/main/webapp")
    args = ["run", "build"]
}

task customClean(type: Delete) {
    delete rootProject.buildDir
}

//appNpmBuild.dependsOn appNpmInstall
//copyWebApp.dependsOn appNpmBuild
appNpmBuild.dependsOn customClean
copyWebApp.dependsOn appNpmBuild
compileJava.dependsOn copyWebApp

//node {
//    download = true
//
//    // Set the work directory for unpacking node
//    workDir = file("${project.buildDir}/nodejs")
//
//    // Set the work directory for NPM
//    npmWorkDir = file("${project.buildDir}/npm")
//}